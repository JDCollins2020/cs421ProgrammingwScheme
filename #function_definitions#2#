#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 736 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 2 #"|["
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 6 #"Points"
0 0 17 3 2 #"] "
0 0 17 3 5 #"Write"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"Scheme"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 2 #" ("
0 0 17 3 10 #"interleave"
0 0 17 3 1 #" "
0 0 17 3 2 #"L1"
0 0 17 3 1 #" "
0 0 17 3 2 #"L2"
0 0 17 3 2 #") "
0 0 17 3 4 #"that"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"accepts"
0 0 17 3 1 #" "
0 0 17 3 5 #"lists"
0 0 17 3 1 #" "
0 0 17 3 2 #"L1"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 3 #"L2."
0 0 17 3 1 #" "
0 0 17 3 3 #"The"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 8 #"produces"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 4 #"such"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"elements"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 11 #"interleaved"
0 0 17 3 1 #" "
0 0 17 3 8 #"elements"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 2 #"L1"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 2 #"L2"
0 0 17 3 1 #","
0 0 17 29 1 #"\n"
0 0 17 3 9 #"beginning"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 3 #"L1."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"     ( ( "
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 4 #") ) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 17 3 27 #";;;no values in either list"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #" )  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 5 #") ) )"
0 0 17 3 19 #";;;L1 out of values"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 5 #" )  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #") ) )"
0 0 17 3 19 #";;;L2 out of values"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ( "
0 0 14 3 4 #"else"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 3 #") ("
0 0 14 3 10 #"interleave"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 10 #") )  ) ) )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 21 #"\"interleave Test 1\\n\""
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 10 #"interleave"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #")"
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 10 #"interleave"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"4"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 10 #"interleave"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"() "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")) "
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 10 #"interleave"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"a"
0 0 17 3 2 #" ("
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 2 #") "
0 0 17 3 1 #"d"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 1 #"f"
0 0 17 3 2 #") "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"9"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 21 #"\"interleave Test 2\\n\""
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 10 #"interleave"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 10 #"interleave"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"4"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 10 #"interleave"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #")"
0 0 17 3 1 #"'"
0 0 17 3 4 #"()) "
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 10 #"interleave"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 1 #"f"
0 0 17 3 2 #") "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"9"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"a"
0 0 17 3 2 #" ("
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 2 #") "
0 0 17 3 1 #"d"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 2 #"|["
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 6 #"Points"
0 0 17 3 2 #"] "
0 0 17 3 5 #"Write"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 5 #"named"
0 0 17 3 2 #" ("
0 0 17 3 9 #"key-store"
0 0 17 3 1 #" "
0 0 17 3 2 #"L1"
0 0 17 3 1 #" "
0 0 17 3 3 #"KEY"
0 0 17 3 2 #") "
0 0 17 3 4 #"that"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"accepts"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 10 #"two-tuples"
0 0 17 3 1 #" "
0 0 17 3 2 #"L1"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 4 #"KEY."
0 0 17 3 1 #" "
0 0 17 3 4 #"This"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 7 #"returns"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"second"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 5 #"tuple"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"begins"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 4 #"KEY."
0 0 17 3 1 #" "
0 0 17 3 2 #"If"
0 0 17 3 1 #" "
0 0 17 3 2 #"L1"
0 0 17 3 1 #" "
0 0 17 3 5 #"doesn"
0 0 17 3 1 #"'"
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 7 #"contain"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 3 #"KEY"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 6 #"return"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"emtpy"
0 0 17 3 1 #" "
0 0 17 3 5 #"list."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"key-store"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 3 #"KEY"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 17 3 11 #";;;no match"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 4 #") ) "
0 0 14 3 3 #"KEY"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #"))) )"
0 0 17 3 8 #";;;match"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     (  "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"key-store"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 14 3 3 #"KEY"
0 0 24 3 5 #" ) ) "
0 0 17 3 20 #";;;search next tuple"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"key-store"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"key-store"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"key-store"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"key-store"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"((() "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;;[5 Points] Write a function named (list-replace ALIST SYM"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; VAL) that accepts a list of elements and returns that"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;; list where all SYM's (a single symbol) have been replaced"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; by the VAL (some scheme value). The replacement must"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;; occur"
0 0 17 3 26 #" even within nested lists."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";;;("
0 0 17 3 6 #"define"
0 0 17 3 31 #" (list-replace ALIST SYM VAL) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; [5 Points] Write a function named (first-n L1 N) that"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; returns the first N elements of L1. If N is negative,"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; return the empty list. If N exceeds the length of L1"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;; return"
0 0 17 3 20 #" all elements of L1."
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;(define ( first-n L1 N )  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;[5 Points] Write a function named (forget-n L1 N) that"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; returns the elements of L1 except for the first N. If"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; N is negative, return all elements. If N exceeds the"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;; length"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 25 #"L1 return the empty list."
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;(define (forget-n L1 N ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;[10 Points] Write a function (running-sum L) that takes"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; a list of numbers L and generates a list of the"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; runnining sums."
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;(define (running-sum L) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;Write a function (counts XS) that takes a list of items"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; XS and generates a counting of the elements in XS."
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; The returned object is a list of lists. Each element"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;; of the returned object is a list of length two"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; containing an element X of XS and an integer denoting"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;; the number of occurrences of X in XS. The order of the"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;; elements in the computed list is not specified. [10 pts]"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;;(define (count XS))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;[5 Points] Write a function (indices L1 X) that takes a"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; list of elements L1 and an element X. The function"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;; returns a list of the indices in L1 that contain X."
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;; See the following examples for clarificaton."
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;(define (indices L1 X))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;[5 Points] Write a function (join-together L1 L2) that"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; takes a sorted list (ascending) of integers L1 and"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;; a sorted list of elements L2 and returns a sorted"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; list containing all elements of both L1 and L2."
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;; See the following examples for clarificaton."
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;;(define (join-together L1 L2 ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;[10 Points] Write a function (merge-sorter L1) that"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; takes list-of-integers L1 and returns all elements"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; of L1 in sorted order. You must use a merge-sort"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; technique that, in the recursive case, a) splits"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; L1 into two approximately-equal-length lists, b)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; sorts those lists, and then c) merges the lists"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;; to obtain the result."
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;(define (merge-sorter L1))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;[10 Points] Consider two techniques for representing"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;; a graph as Scheme lists. We can represent a"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; directed graph as a list of edges. We call this"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; representation an el-graph (i.e. edge-list graph)."
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; An edge is itself a list of length two such that"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;; the first element is a symbol denoting the source"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;; of the edge and the second element is a symbol"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;; denoting the target of the edge. Note that an"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;; edge is a list (not just a pair). For example,"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; the following is a graph: '((x y) (y z) (x z))."
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;; We can also represent a graph similar to an"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; adjacency matrix. We call this representation an"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; x-graph (i.e. matrix-graph). In this case, a graph"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; is a list of adjacencies where an adjacency is a"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;; list of length two such that the first element is a"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;; node (a symbol) and the second element is a list of"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;; the targets of that node. For example, the"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; following is a graph: '((x (y z)) (y (z)) (z ()))."
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";;; Write function (el-graph->x-graph g), that accepts an el-graph g"
 #" and returns an x-graph of g."
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";;; Write "
0 0 17 3 8 #"function"
0 0 17 3 23 #" (x-graph->el-graph g),"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 7 #"accepts"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 7 #"x-graph"
0 0 17 3 1 #" "
0 0 17 3 1 #"g"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 24 #"returns an el-graph of g"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;(define (el-graph->x-graph g))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;(define (x-graph->el-graph g))"
0           0
