#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1395 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"#|[5 Points] Write a Scheme function (interleave L1 L2) that"
0 0 17 29 1 #"\n"
0 0 17 3 58
#"accepts lists L1 and L2. The function produces a list such"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"that the elements are interleaved elements of L1 and L2,"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"beginning with L1."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"     ( ( "
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 4 #") ) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 17 3 27 #";;;no values in either list"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #" )  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 5 #") ) )"
0 0 17 3 19 #";;;L1 out of values"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 5 #" )  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #") ) )"
0 0 17 3 19 #";;;L2 out of values"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ( "
0 0 14 3 4 #"else"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 3 #") ("
0 0 14 3 10 #"interleave"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 10 #") )  ) ) )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"(display \"interleave Test 1\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"(interleave '(1 2 3)'(4 5 6))"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(interleave '(1 2 3) '(4))"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"(interleave '() '(1 2)) "
0 0 17 29 1 #"\n"
0 0 17 3 38 #"(interleave '(a (b c) d) '((e f) 5 9))"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"(display \"interleave Test 2\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"(interleave '(4 5 6) '(1 2 3))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(interlea"
0 0 17 3 17 #"ve '(4) '(1 2 3))"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"(interleave '(1 2)'()) "
0 0 17 29 1 #"\n"
0 0 17 3 38 #"(interleave '((e f) 5 9) '(a (b c) d))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"#|[5 Points] Write a function named (key-store L1 KEY) that"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"accepts a list of two-tuples L1 and a value KEY. This"
0 0 17 29 1 #"\n"
0 0 17 3 57 #"function returns the second value of the first tuple that"
0 0 17 29 1 #"\n"
0 0 17 3 54 #"begins with KEY. If L1 doesn't contain the KEY, return"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"the emtpy list."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"key-store"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 3 #"KEY"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 17 3 11 #";;;no match"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 4 #") ) "
0 0 14 3 3 #"KEY"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #"))) )"
0 0 17 3 8 #";;;match"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     (  "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"key-store"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 14 3 3 #"KEY"
0 0 24 3 5 #" ) ) "
0 0 17 3 20 #";;;search next tuple"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"(display \"key-store Test 1\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"(key-store '((a 2) (b c) (c (3 4))) 'c)"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"(key-store '((a 2) (b c) (c (3 4))) 'b)"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"(key-store '((a 2) (b c) (c (3 4))) 'z)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"(key-store '((() a)) '())"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;;[5 Points] Write a function named (list-replace ALIST SYM"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; VAL) that accepts a list of elements and returns that"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;; list where all SYM's (a single symbol) have been replaced"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; by the VAL (some scheme value). The replacement must"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;; occur even within nested lists."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list-replace"
0 0 24 3 1 #" "
0 0 14 3 5 #"ALIST"
0 0 24 3 1 #" "
0 0 14 3 3 #"SYM"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"ALIST"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"SYM"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"ALIST"
0 0 24 3 6 #") ) ( "
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list-replace"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"ALIST"
0 0 24 3 2 #") "
0 0 14 3 3 #"SYM"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 5 #") ) )"
0 0 17 3 19 #";;check and replace"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"ALIST"
0 0 24 3 6 #") ) ( "
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"ALIST"
0 0 24 3 3 #") ("
0 0 14 3 12 #"list-replace"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"ALIST"
0 0 24 3 2 #") "
0 0 14 3 3 #"SYM"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 5 #") ) )"
0 0 17 3 41 #";;;keep val and run through independently"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     (  "
0 0 14 3 4 #"else"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list-replace"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"ALIST"
0 0 24 3 2 #") "
0 0 14 3 3 #"SYM"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #") ("
0 0 14 3 12 #"list-replace"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"ALIST"
0 0 24 3 2 #") "
0 0 14 3 3 #"SYM"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 5 #") ) )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"(display \"list-replace Test 1\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"(list-replace '(a b c) 'a 3) ;;;---> (3 b c)"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"(list-replace '(a (a b c) c) 'a 3) ;;;---> (3 (3 b c)"
0 0 17 3 3 #" c)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"(list-replace '() 'a 3) ;;;---> ()"
0 0 17 29 1 #"\n"
0 0 17 3 60
#"(list-replace '(a (a (a))) 'a '(3)) ;;;--> ((3) ((3) ((3))))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; [5 Points] Write a function named (first-n L1 N) that"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; returns the first N elements of L1. If N is negative,"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; return the empty list. If N exceeds the length of L1"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;; return all elements of L1."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 7 #"first-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    ( ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 4 #") ) "
0 0 21 3 1 #"'"
0 0 24 3 5 #"() ) "
0 0 17 3 25 #";;;list is empty or N = 0"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (  "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #")( "
0 0 14 3 7 #"first-n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #") ) ) )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"(display \"first-n Test 1\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"(first-n '("
0 0 17 3 27 #"a b c d e f) -3) ;;;---> ()"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"(first-n '(a b c d e f) 3) ;;;---> (a b c)"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"(first-n '(a b c d e f) 33) ;;;---> (a b c d e f)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(first-n '() 0) ;;;---> ()"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;[5 Points] Write a function named (forget-n L1 N) that"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; returns the elements of L1 except for the first N. If"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; N is negative, return all elements. If N exceeds the"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;; length of L1 return the empty list."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"forget-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    ( ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 2 #"L1"
0 0 24 3 3 #" ) "
0 0 17 3 16 #";;;N is negative"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    ( ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")  ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 4 #") ) "
0 0 17 3 31 #";;; N = 0 and list is not empty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 5 #"() ) "
0 0 17 3 26 #";;; N exceeds length of L1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ( "
0 0 14 3 4 #"else"
0 0 24 3 3 #" ( "
0 0 14 3 8 #"forget-n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #") ) )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"(display \"forget-n Test 1\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"(forget-n '(a b c d e f) -3) ;;;---> (a b c d e f)"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"(forget-n '(a b c d e f) 3) ;;;---> (d e f)"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"(forget-n '(a b c d e f) 6) ;;;---> ()"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(forget-n"
0 0 17 3 40 #" '(a b c d e f) 0) ;;;---> (a b c d e f)"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"(forget-n '(a b c d e f) 33) ;;;---> ()"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"(forget-n '() 0) ;;;---> ()"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;[10 Points] Write a function (running-sum L) that takes"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; a list of numbers L and generates a list of the"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; runnining sums."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"running-sum"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 17 3 13 #";;;empty list"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 6 #") )  ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 11 #"running-sum"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     )"
0 0 17 3 19 #";;single value list"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"running-sum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 5 #") ) )"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ) "
0 0 17 3 18 #";;;multivalue list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"(display \"running-sum Test 1\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(runnin"
0 0 17 3 22 #"g-sum  '()) ;;;---> ()"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"(running-sum  '(1))"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"(running-sum  '(1 2)) ;;;---> (1 3)"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"(running-sum  '(1 2 3)) ;;;---> (1 3 6)"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"(running-sum  '(3 0 -2 3)) ;;;---> (3 3 1 4)"
0 0 17 29 1 #"\n"
0 0 17 3 79
(
 #"(running-sum  '(0 1 2 3 4 5 6 7 8 9 10)) ;;;---> (0 1 3 6 10 15 21 2"
 #"8 36 45 55)"
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;Write a function (counts XS) that takes a list of items"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; XS and generates a counting of the elements in XS."
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; The returned object is a list of lists. Each element"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;; of the returned object is a list of length two"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; containing an element X of XS and an integer denoting"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;; the number of occurrences of X in XS. The order of the"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;; elements in the computed list is not specified. [10 pts]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"#|removes all of a given SYM from a list|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"remove-sym"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #" "
0 0 14 3 3 #"SYM"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"SYM"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 7 #" ) ) ( "
0 0 14 3 10 #"remove-sym"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 2 #") "
0 0 14 3 3 #"SYM"
0 0 24 3 4 #" ) )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     (  "
0 0 14 3 4 #"else"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"cons"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 5 #" ) ( "
0 0 14 3 10 #"remove-sym"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #" ) "
0 0 14 3 3 #"SYM"
0 0 24 3 6 #" ) ) )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"#|counts the occurences of a given SYM in a list|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"count-sym"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #" "
0 0 14 3 3 #"SYM"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"    ( ( "
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"0"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"    ( ( "
0 0 14 3 6 #"equal?"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #" ) "
0 0 14 3 3 #"SYM"
0 0 24 3 5 #" ) ( "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #" ( "
0 0 14 3 9 #"count-sym"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #" ) "
0 0 14 3 3 #"SYM"
0 0 24 3 6 #" ) ) )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ( "
0 0 14 3 4 #"else"
0 0 24 3 3 #" ( "
0 0 14 3 9 #"count-sym"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #" ) "
0 0 14 3 3 #"SYM"
0 0 24 3 4 #" ) )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"counts"
0 0 24 3 1 #" "
0 0 14 3 2 #"XS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"    ( ( "
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"XS"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ( "
0 0 14 3 4 #"else"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"cons"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"list"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"XS"
0 0 24 3 5 #" ) ( "
0 0 14 3 9 #"count-sym"
0 0 24 3 1 #" "
0 0 14 3 2 #"XS"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"XS"
0 0 24 3 9 #" ) ) ) ( "
0 0 14 3 6 #"counts"
0 0 24 3 3 #" ( "
0 0 14 3 10 #"remove-sym"
0 0 24 3 1 #" "
0 0 14 3 2 #"XS"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"XS"
0 0 24 3 10 #" ) ) ) ) )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"(dis"
0 0 17 3 26 #"play \"count-sym Test 1\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"(count-sym '(a d b b q b 0 1 c) 'b) ;;;--->3"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"(count-sym '(b b b b) 'b) ;;;--->4"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"(count-sym '() 'b) ;;;--->0"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"(display \"remove-sym Test 1\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 60
#"(remove-sym '(b 1 3 b 0 c d b c b) 'b) ;;;--->'(1 3 0 c d c)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"(remove-sym '(b b b b) 'b) "
0 0 17 3 10 #";;;--->'()"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"(remove-sym '() 'b) ;;;---> '()"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"(display \"counts Test 1\\n\")"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"(counts '(a b c c b b)) ;;;---> '((a 1) (b 3) (c 2))"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"(counts '()) ;;;---> '()"
0 0 17 29 1 #"\n"
0 0 17 3 58
#"(counts '(1 3 c c #f)) ;;;---> '((1 1) (3 1) (c 2) (#f 1))"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"(counts '(b b a b))"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"(counts '(a b c d a 1 2 3 a))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;[5 Points] Write a function (indices L1 X) that takes a"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; list of elements L1 and an element X. The function"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;; returns a list of the indices in L1 that contain X."
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;; See the following examples for clarificaton."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"indices"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 14 3 3 #"map"
0 0 24 3 3 #" ( "
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ( "
0 0 14 3 1 #"x"
0 0 24 3 5 #" ) ( "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #" ) )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"          ( ( "
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"          ( ( "
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 7 #" ) ) ( "
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #" ( "
0 0 14 3 7 #"indices"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #" ) "
0 0 14 3 1 #"X"
0 0 24 3 8 #" ) ) )  "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          ( "
0 0 14 3 4 #"else"
0 0 24 3 5 #"   ( "
0 0 14 3 7 #"indices"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #" ) "
0 0 14 3 1 #"X"
0 0 24 3 4 #" ) )"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 7 #"indices"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 1 #"f"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"a"
0 0 17 3 2 #") "
0 0 17 3 15 #";;;---> (0 3 6)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 7 #"indices"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"a"
0 0 17 3 2 #" ("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 2 #") "
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 1 #"d"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"a"
0 0 17 3 2 #") "
0 0 17 3 11 #";;;---> (0)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 7 #"indices"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 1 #"f"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"z"
0 0 17 3 2 #") "
0 0 17 3 10 #";;;---> ()"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 7 #"indices"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"(() ("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 2 #") "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 5 #" ()) "
0 0 17 3 1 #"'"
0 0 17 3 4 #"()) "
0 0 17 3 13 #";;;---> (0 4)"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;[5 Points] Write a function (join-together L1 L2) that"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; takes a sorted list (ascending) of integers L1 and"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;; a sorted list of elements L2 and returns a sorted"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; list containing all elements of both L1 and L2."
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;; See the following examples for clarificaton."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"join-together"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"     ( ( "
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 4 #") ) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() )"
0 0 17 3 27 #";;;no values in either list"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"     ( ( "
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #" )  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 5 #") ) )"
0 0 17 3 19 #";;;L1 out of values"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"     ( ( "
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 5 #" )  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #") ) )"
0 0 17 3 19 #";;;L2 out of values"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"     ( ( "
0 0 14 3 1 #"<"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #" ) ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 7 #" ) ) ( "
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                      ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                      ( "
0 0 14 3 13 #"join-together"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #" ) "
0 0 14 3 2 #"L2"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"     ( ( "
0 0 14 3 1 #">"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 5 #" ) ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 7 #" ) ) ( "
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                      ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                      ( "
0 0 14 3 13 #"join-together"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 4 #" ) )"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"join-together Test 1"
0 0 19 3 1 #"\\"
0 0 19 3 2 #"n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"join-together"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"22"
0 0 24 3 3 #")) "
0 0 17 3 7 #";;;--->"
0 0 17 3 2 #" ("
0 0 17 3 4 #"-12 "
0 0 17 3 1 #"3"
0 0 17 3 3 #" 12"
0 0 17 3 1 #" "
0 0 17 3 2 #"15"
0 0 17 3 7 #" 18 22)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"join-together"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"22"
0 0 24 3 3 #")) "
0 0 17 3 7 #";;;--->"
0 0 17 3 2 #" ("
0 0 17 3 3 #"-12"
0 0 17 3 7 #" 15 22)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"join-together"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 17 3 7 #";;;--->"
0 0 17 3 2 #" ("
0 0 17 3 1 #"3"
0 0 17 3 7 #" 12 18)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"join-together"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 3 #")) "
0 0 17 3 9 #";;;---> ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 1 #" "
0 0 17 3 3 #"200"
0 0 17 3 1 #" "
0 0 17 3 3 #"300"
0 0 17 3 1 #" "
0 0 17 3 3 #"400"
0 0 17 3 9 #" 500 600)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"join-together"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 3 #")) "
0 0 17 3 29 #";;;---> (1 2 3 4 100 500 600)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;[10 Points] Write a function (merge-sorter L1) that"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; takes list-of-integers L1 and returns all elements"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; of L1 in sorted order. You must use a merge-sort"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; technique that, in the recursive case, a) splits"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; L1 into two approximately-equal-length lists, b)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; sorts those lists, and then c) merges the lists"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;; to obtain the result."
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;(define (merge-sorter L1))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;[10 Points] Consider two techniques for representing"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;; a graph as Scheme lists. We can represent a"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; directed graph as a list of edges. We call this"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; representation an el-graph (i.e. edge-list graph)."
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; An edge is itself a list of length two such that"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;; the first element is a symbol denoting the source"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;; of the edge and the second element is a symbol"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;; denoting the target of the edge. Note that an"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;; edge is a list (not just a pair). For example,"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; the following is a graph: '((x y) (y z) (x z))."
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;; We can also represent a graph similar to an"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; adjacency matrix. We call this representation an"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; x-graph (i.e. matrix-graph). In this case, a graph"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;; is a list of adjacencies where an adjacency is a"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;; list of length two such that the first element is a"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;; node (a symbol) and the second element is a list of"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;; the targets of that node. For example, the"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; following is a graph: '((x (y z)) (y (z)) (z ()))."
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";;; Write function (el-graph->x-graph g), that accepts an el-graph g"
 #" and returns an x-graph of g."
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";;; Write function (x-graph->el-graph g), that accepts an x-graph g "
 #"and returns an el-graph of g"
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;(define (el-graph->x-graph g))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;(define (x-graph->el-graph g))"
0           0
